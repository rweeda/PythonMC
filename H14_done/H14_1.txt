<!-- HIER BEGINT PAGINA INHOUD -->

<!--IA H14.1
<p>1: Meerdere waarden opleveren in Python</p>

<h1 id="H131">H13.1 - Meerdere waarden opleveren</h1>

-->

<p><iframe width="640" height="360" src="https://www.youtube.com/embed/V_vX8U0Nx2U" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></p>

<p>Een functie kan in principe maar één waarde opleveren. Dit zorgt ervoor dat je functie ook maar een doel heeft
    en daardoor overzichtelijk, leesbaar en makkelijk aanpasbaar blijft.</p>

<p>Maar soms kan het handig zijn als een functie
    meerdere waarden teruggeeft. In Python kan dat. Je kunt meerdere waarden opleveren, gescheiden door een komma (oftewel
    als lijst).</p>

<p>In het voorbeeld hieronder retourneert de functie twee waarden: namelijk <code>worp1</code>
    en <code>worp2</code>. Bij de functieaanroep op regel 10 worden beide waarden opgeslagen in de variabelen
    <code>dobbel1</code> en <code>dobbel2</code>.

</p>
<p><iframe height="400px" width="100%" src="https://repl.it/@smer/H13v2?lite=true#main.py" scrolling="no" frameborder="no" allowtransparency="true" allowfullscreen="true" sandbox="allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts
allow-modals"></iframe></p>





<p class="opdracht" id="opgave1311">Opdracht 14.1 Meerdere waarden teruggeven</p>
Breid het programma hieronder uit zodat de functie <code>kiesWillekeurigeKlas</code>:
<ol style="list-style-type: lower-alpha">
    <li>twee waarden oplevert: <code>willekeurige_jaarlaag</code> en <code>willekeurige_klas</code>;
    </li>
    <li>in het hoofdprogramma beide waarden opslaag als <code>jaar</code> en <code>klas</code>.</li>
</ol>
<p><iframe width="100%" height="800px" src="https://replit.com/team/InformaticaActief/H141-meerdere-retourwaarden"></iframe></p>
Klik <a href="H14_oplossingen.html#opgave141" target="_blank">hier</a> voor een voorbeelduitwerking.


<!--
import random

jaarlaag = [4,5,6]
klas = ["a", "b", "c", "d"]

def kiesWillekeurigeKlas():
  willekeurige_jaarlaag = random.choice( jaarlaag )
  willekeurige_klas = random.choice( klas )
  return ## HIER TWEE WAARDEN TERUGGEVEN

### HOOFDPROGRAMMA
#HIER TWEE WAARDEN OPSLAAN = kiesWillekeurigeKlas()
print(jaar)
print(klas)
-->

<!--8.2.8 Meerdere retourwaardes Je bent niet beperkt in je functies tot slechts één retourwaarde. Je kunt
meerdere waardes in één keer retourneren door er komma’s tussen te zetten. Als je deze waardes wilt gebruiken in
je programma na aanroep van de functies, moet je ze toekennen aan meerdere variabelen. Die zet je allemaal aan de
linkerkant van de assignment operator, ook met komma’s ertussen. Dit kan ik het beste illustreren aan de hand van
een voorbeeld: 104 Hoofdstuk 8. Functies listing0807.py import datetime def plusDagen( jaar , maand , dag,
increment ): startdatum = datetime.datetime( jaar , maand , dag ) einddatum = startdatum + datetime.timedelta(
days=increment ) return einddatum.year , einddatum.month , einddatum.day y, m, d = plusDagen( 2015 , 11, 13, 55
) print( "{}/{}/{}".format( y, m, d ) ) De functie plusDagen() krijgt vier argumenten, namelijk integers die een jaar,
een maand, een dag, en een aantal dagen die je wilt optellen bij de datum die wordt weergegeven door de eerste
drie argumenten. Er worden drie waardes geretourneerd, namelijk een nieuw jaar, een nieuwe maand, en een nieuwe
dag. De code stopt die in de variabelen y, m, en d. Als je de code hierboven bestudeert, vraag je je misschien af
hoe plusDagen() precies werkt. Zoals ik al zei, het is een voordeel van functies dat zolang ze hun werk doen en je
weet wat de argumenten zijn en wat er geretourneerd wordt, dat je niet hoeft te weten hoe de functie in elkaar zit.
Je kunt de functie gebruiken zonder kennis van het interne proces. Dus je mag gewoon negeren wat je in
plusDagen() ziet staan (overigens gebruikt de code van plusDagen() de datetime module, die aan de orde komt in
hoofdstuk 27).-->